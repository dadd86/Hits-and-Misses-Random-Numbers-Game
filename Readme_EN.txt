Hits and Misses Random Numbers Game Project
This C project is a game where the system generates a sequence of random numbers between 1 and 4, and the user must guess the sequence by entering their own numbers. After each attempt, the program calculates how many numbers the user got right and wrong, displaying a detailed summary of the hits and misses. The game compares the positions of the matches and mismatches and provides a final percentage of correct guesses.

Project Description
The program generates a random sequence of numbers within a specified range (between 1 and 4) and allows the user to input their own sequence of numbers. After each attempt, the program compares the sequences and calculates the number of correct and incorrect guesses. It also provides a detailed summary of the results.

Functionalities
Random Number Generation: The system generates a sequence of random numbers between 1 and 4. The total number of generated numbers varies between a specified minimum and maximum.
User Number Input: The user enters their own sequence of numbers, also between 1 and 4, to be compared with the system-generated sequence.
Hits and Misses Calculation: The system compares the two sequences and counts the hits (numbers matching at the same position) and misses (numbers not matching at the same position).
Results Summary: After comparing the sequences, the program displays a summary of the hits and misses and calculates the hit percentage based on the total numbers.
Detailed Feedback: The program provides a detailed list of which numbers were correct or incorrect in each position, 
showing the differences between the system-generated and user-entered sequences.

Key Functions
NumeroAleatorio(): Generates a random number between 1 and 4.
NumeroAleatorioV1(int minimo, int maximo): Generates a random number within a specified range provided by the user.
EscrituraAleatoria(): Fills an array with random numbers generated by NumeroAleatorio().
Lectura(): Displays the values of the randomly generated array, showing the position of each number.
EscrituraArray(): Allows the user to input their own sequence of numbers, ensuring the values are between 1 and 4.
Contador(): Compares the system-generated sequence with the user-entered sequence and counts the number of hits and misses.
AciertosFallos(): Prints a detailed message about which positions were correct or incorrect in the entered sequences.
MuestraAciertosFallos(): Prints a complete summary of the hits and misses, indicating the positions that were correct or incorrect.

Requirements
Compiler: A C compiler compatible with the C99 standard or higher.
Operating System: Compatible with Windows, Linux, and macOS.
Usage Instructions
Compilation and Execution:
To compile the project, use a C compiler (e.g., GCC) with the following command:
	gcc -o random_game random_game.c
To run the program, use the following command:
	./random_game

Interaction
The program generates a sequence of random numbers and asks the user to input their own sequence of numbers.
After the user enters their sequence, the program compares both sequences and displays the number of hits and misses.
The program also shows a detailed summary of the hits and misses, including the positions where errors occurred.

Example Usage
Random Number Generation:
	The program generates, for example, 8 random numbers. The sequence might look like: 1, 3, 2, 4, 1, 2, 3, 4.
User Input:
	The user enters their own sequence, such as 1, 2, 3, 4, 1, 2, 3, 4.
Hits and Misses Calculation:
	The program compares the two sequences and calculates the number of hits and misses. In this case, there might be 6 hits and 2 misses.
Results Summary:
	The program calculates the percentage of hits (in this case, 75%) and provides a detailed summary of the positions that were correct or incorrect.
Example Output:

**************************************************
Summary of inputs is as follows:
**************************************************
Position 0: Randomly generated was 1, you entered 1. Result: HIT!
Position 1: Randomly generated was 3, you entered 2. Result: MISS!
Position 2: Randomly generated was 2, you entered 3. Result: MISS!
Position 3: Randomly generated was 4, you entered 4. Result: HIT!
...
You got 6 random numbers correct out of 8.
This represents 75.00 percent accuracy.

Contributions
Contributions to the project are welcome. If you wish to improve the code, add new features, or fix bugs, please follow these steps:
Fork the repository.
Create a new branch for your changes:
	git checkout -b feature/new-feature
Make your changes and commit them:
	git commit -am 'Add new feature'
Push to the branch:
	git push origin feature/new-feature
Create a pull request describing the changes made.